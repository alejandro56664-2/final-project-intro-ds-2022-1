def test_delitem_keyerror ( self ) : <NEWLINE> <INDENT> e = EntryBase ( req_ ( ) <NEWLINE> del e [ <STRING> ] <NEWLINE> <DEDENT>
def retranslateUi ( self , SettingsDialog_base ) : <NEWLINE> <INDENT> SettingsDialog_base . setWindowTitle ( QtGui . QApplication . translate ( <STRING> , <STRING> , None , QtGui . QApplication . UnicodeUTF8 ) ) <NEWLINE> self . textLabel3_2_2 . setText ( QtGui . QApplication . translate ( <STRING> , <STRING> <NEWLINE> <DEDENT>
def process ( fn , mergefile = None , lazy = False ) : <NEWLINE> <INDENT> if lazy and mergefile and os . stat ( fn ) . st_mtime < os . stat ( mergefile ) . st_mtime : <NEWLINE> return <NEWLINE> print ( mergefile ) <NEWLINE> gen = Gen ( ) <NEWLINE> directives . execute ( directives . load ( fn ) , gen ) <NEWLINE> result = gen . generate ( ) <NEWLINE> if mergefile is None : <NEWLINE> <INDENT> print ( result ) <NEWLINE> <DEDENT> else : <NEWLINE> print ( <STRING> % ( fn , mergefile ) ) <NEWLINE> <INDENT> result = merge ( mergefile , result ) <NEWLINE> <DEDENT> <DEDENT>
def samePath ( path1 , path2 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if os . path . abspath ( path1 ) == os . path . abspath ( path2 ) : <NEWLINE> return True <NEWLINE> else : <NEWLINE> return False <NEWLINE> <DEDENT>
def output_to_file ( filename , mode = <STRING> ) : <NEWLINE> <INDENT> with contextlib . closing ( open ( filename , mode ) ) as port : <NEWLINE> with CURRENT_OUTPUT_PORT . let ( port ) : <NEWLINE> <INDENT> yield <NEWLINE> <DEDENT> <DEDENT>
def create ( self , req , body = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> context = req . environ [ <STRING> ] <NEWLINE> authorize ( context ) <NEWLINE> pk , cert = rpc . call ( context , FLAGS . cert_topic , <NEWLINE> <INDENT> { <STRING> : <STRING> , <NEWLINE> <INDENT> <STRING> : { <STRING> : context . user_id , <NEWLINE> <INDENT> <STRING> : context . project_id } ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> context = req . environ [ <STRING> ] <NEWLINE> return { <STRING> : _translate_certificate_view ( cert , pk ) } <NEWLINE> <DEDENT>
def get_mimetype ( res , filename ) : <NEWLINE> <INDENT> if res in ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> ) : <NEWLINE> guessed_type , _ = mimetypes . guess_type ( filename ) <NEWLINE> if guessed_type : <NEWLINE> res = guessed_type <NEWLINE> <DEDENT> return res <NEWLINE> <DEDENT>
def _GenApiConfigCallback ( args , api_func = GenApiConfig ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> service_configs = api_func ( args . service <NEWLINE> <INDENT> hostname = args . hostname , <NEWLINE> application_path = args . application ) <NEWLINE> <DEDENT> for api_name_version , config in service_configs . iteritems ( ) : <NEWLINE> <INDENT> _WriteFile ( args . output , api_name_version + <STRING> , config ) <NEWLINE> <DEDENT> <DEDENT>
def expand_light_count ( dimmed_rgb count ) : <NEWLINE> <INDENT> dmx_channels = [ ] <NEWLINE> for light in range ( count ) : <NEWLINE> <INDENT> dmx_channels . extend ( dimmed_rgb ) <NEWLINE> <DEDENT> return dmx_channels <NEWLINE> <DEDENT>
( QtGui . QApplication . translate ( <STRING> , <STRING> <NEWLINE> <DEDENT>
