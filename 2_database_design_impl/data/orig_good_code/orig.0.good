def get_UB ( config ) : <NEWLINE> <INDENT> sample , geometry , detector , engines = new_hkl_diffractometer ( config ) <NEWLINE> return hkl_matrix_to_numpy ( sample . UB_get ( ) ) <NEWLINE> <DEDENT>
<STRING> <NEWLINE> import datetime <NEWLINE> import math <NEWLINE> import pytz <NEWLINE> import random <NEWLINE> import re <NEWLINE>
class IWikiPageManipulator ( Interface ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def prepare_wiki_page ( req , page , fields ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> <DEDENT> def validate_wiki_page ( req , page ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> <DEDENT> <DEDENT>
def test_local ( ) : <NEWLINE> <INDENT> src = urllib . urlopen ( url ) <NEWLINE> with open ( local , <STRING> ) as f : <NEWLINE> <INDENT> f . write ( src . read ( ) ) <NEWLINE> <DEDENT> with open ( local , <STRING> ) as source : <NEWLINE> <INDENT> forum_topics ( source ) <NEWLINE> <DEDENT> <DEDENT>
class install ( _install ) : <NEWLINE> <INDENT> def run ( self ) : <NEWLINE> <INDENT> super ( ) . run ( ) <NEWLINE> self . execute ( <NEWLINE> <INDENT> make_shortcut , <NEWLINE> ( self . install_scripts , ) , <NEWLINE> msg = <STRING> <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT> <DEDENT>
def main ( ) : <NEWLINE> <INDENT> actions = log_collection . find ( <NEWLINE> <INDENT> { } , <NEWLINE> { <STRING> : True } <NEWLINE> <DEDENT> ) . distinct ( <NEWLINE> <INDENT> <STRING> <NEWLINE> <DEDENT> ) <NEWLINE> for action in actions : <NEWLINE> <INDENT> analyze_log_action ( action ) <NEWLINE> <DEDENT> <DEDENT>
class InteractionStyle ( Enum ) : <NEWLINE> <INDENT> SYNCHRONOUS = auto ( ) <NEWLINE> ASYNCHRONOUS = auto ( ) <NEWLINE> <DEDENT>
def main ( ) : <NEWLINE> <INDENT> input_length = 100 <NEWLINE> hidden_cnt = 50 <NEWLINE> nn = NeuralNetwork ( RNN ( input_length , hidden_cnt ) ) <NEWLINE> data = get_test_data ( input_length ) <NEWLINE> print ( <STRING> ) <NEWLINE> nn . train ( data ) <NEWLINE> print ( <STRING> ) <NEWLINE> nn . test ( data ) <NEWLINE> print ( <STRING> ) <NEWLINE> nn . run_with_cross_validation ( data , 2 ) <NEWLINE> print ( <STRING> ) <NEWLINE> features = nn . feature_selection ( data ) <NEWLINE> print ( <STRING> . format ( features ) ) <NEWLINE> <DEDENT>
class Maker ( FileSystemEventHandler ) : <NEWLINE> <INDENT> def on_modified ( self , _ ) : <NEWLINE> <INDENT> Maker . lock = True <NEWLINE> print ( <STRING> ) <NEWLINE> p = subprocess . Popen ( <STRING> ) <NEWLINE> p . wait ( ) <NEWLINE> <DEDENT> <DEDENT>
def test_t17 ( ) : <NEWLINE> <INDENT> lines = run_test ( <STRING> ) . split ( <STRING> ) <NEWLINE> assert ( lines [ 1 ] == <STRING> ) <NEWLINE> <DEDENT>
